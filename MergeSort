#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int arr[], int left[], int n_left, int right[], int n_right) {
    int i = 0, j = 0, k = 0;
    while (i < n_left && j < n_right) {
        if (left[i] <= right[j]) {
            arr[k] = left[i];
            i++;
        } else {
            arr[k] = right[j];
            j++;
        }
        k++;
    }
    while (i < n_left) {
        arr[k] = left[i];
        i++;
        k++;
    }
    while (j < n_right) {
        arr[k] = right[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int n) {
    if (n < 2) {
        return;
    }
    int mid = n / 2;
    int left[mid], right[n - mid];
    for (int i = 0; i < mid; i++) {
        left[i] = arr[i];
    }
    for (int i = mid; i < n; i++) {
        right[i - mid] = arr[i];
    }
    mergeSort(left, mid);
    mergeSort(right, n - mid);
    merge(arr, left, mid, right, n - mid);
}

int main() {
    int n;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &n);

    int arr[n];
    srand(time(NULL));  // inicializa o gerador de números aleatórios com o tempo atual
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100;  // preenche o vetor com números aleatórios de 0 a 99
    }

    printf("Vetor original: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    mergeSort(arr, n);

    printf("Vetor ordenado: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
